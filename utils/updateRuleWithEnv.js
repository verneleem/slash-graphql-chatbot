const fs = require('fs');
const dotenv = require('dotenv');
const result = dotenv.config();
// const ManagementClient = require('auth0').ManagementClient

if (result.error) throw result.error;
if (!process.env.REACT_APP_GRAPHQL_ENDPOINT)
  throw new Error('REACT_APP_GRAPHQL_ENDPOINT not set');
if (!process.env.REACT_APP_AUTH_NAMESPACE)
  console.log(
    'REACT_APP_AUTH_NAMESPACE was not defined in .env using default "https://my.app.io/jwt/claims"',
  );
if (!process.env.REACT_APP_AUTH0_DOMAIN)
  throw new Error('REACT_APP_AUTH0_DOMAIN not set');
if (!process.env.REACT_APP_AUTH0_CLIENT_ID)
  throw new Error('REACT_APP_AUTH0_CLIENT_ID not set');
if (!process.env.AUTH0_CLIENT_SECRET)
  throw new Error('AUTH0_CLIENT_SECRET not set');

const {
  REACT_APP_GRAPHQL_ENDPOINT,
  REACT_APP_AUTH_NAMESPACE = 'https://my.app.io/jwt/claims',
  REACT_APP_AUTH0_DOMAIN,
  REACT_APP_AUTH0_CLIENT_ID,
  AUTH0_CLIENT_SECRET,
} = process.env;

try {
  let data = fs.readFileSync('deploy/auth0RuleTemplate.js', 'utf8');
  data = data.replace(
    /\$\{REACT_APP_GRAPHQL_ENDPOINT\}/g,
    REACT_APP_GRAPHQL_ENDPOINT,
  );
  data = data.replace(
    /\$\{REACT_APP_AUTH_NAMESPACE\}/g,
    REACT_APP_AUTH_NAMESPACE,
  );
  data = data.replace(
    /\$\{REACT_APP_AUTH0_CLIENT_ID\}/g,
    REACT_APP_AUTH0_CLIENT_ID,
  );
  data =
    `// NOTE: Do not edit this file directly. It gets generated from ./auth0RuleTemplate.js\r\n` +
    data;
  try {
    fs.writeFileSync('deploy/auth0Rule.js', data);
  } finally {
    console.log('The `deploy/auth0Rule.js` file was generated Successfully.');

    console.log(`
      Advance configuration to manage rules has not yet been configured in
      \`utils/updateRuleWithEnv.js\`. To use this auth0 rule, please copy the
      contents of \`deploy/auth0Rule.js\` into a new rule on your Auth0 Dashboard.
    `);

    /**
     * TODO: Add advance config to push rules on change.
     * NOTE: This portion of the script will error out if the Auth0 account has not been
     * properly configured to give the Application M2M access, authorizing the API, given
     * the Grant Type of Client Credentials, and set the M2M App's permissions granting
     * read:rules, update:rules, and create:rules. This setup is beyond this setup at this
     * time, but we have added the following code to get you started in this process.
     */

    // const management = new ManagementClient({
    //   domain: REACT_APP_AUTH0_DOMAIN,
    //   clientId: REACT_APP_AUTH0_CLIENT_ID,
    //   clientSecret: AUTH0_CLIENT_SECRET,
    // })
    // const data = fs.readFileSync('deploy/auth0Rule.js', 'utf8');
    // const ruleData = {
    //   name: REACT_APP_AUTH0_CLIENT_ID,
    //   enabled: true,
    //   script: data,
    // };
    // const addOrUpdateRule = (ruleData) => {
    //   management.getRules((err, rules)=>{
    //     if (err) throw err;
    //     const rule = rules.find((r) => r.name === ruleData.name)
    //     if (rule) {
    //       management.updateRule({ id: rule.id }, ruleData, (err, _) => {
    //         if (err) throw err;
    //         console.log('Rule Pushed to Auth0 Successfully!');
    //       });
    //     } else {
    //       management.createRule(ruleData, (err, _) => {
    //         if (err) throw err;
    //         console.log('New Rule Pushed to Auth0 Successfully!');
    //       });
    //     }
    //   });
    // }
    // addOrUpdateRule(ruleData)
  }
} catch (err) {
  throw err;
}
