type Test {
  id: ID
  test: String!
}

type User {
  username: String! @id
  displayName: String
  picture: String
  createdBlocks: [Block] @hasInverse(field: "author")
}

enum Format {
  Text
  Image
  Markup
  Link
  LinkExt
}

type Block {
  id: ID!
  isRoot: Boolean
  isSearchable: Boolean @search
  format: Format
  delay: Float
  content: String @search(by: [hash, term, fulltext, regexp])
  next: [Block] @hasInverse(field: "prev")
  prev: [Block] @hasInverse(field: "next")
  author: User!
}

type Message {
  id: ID
  by: User
  in: Conversation
  read: Boolean
  at: DateTime!
}

type Conversation {
  id: ID!
  by: User
  messages: [Message] @hasInverse(field: "in")
}